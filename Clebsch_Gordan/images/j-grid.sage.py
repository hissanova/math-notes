
# This file was *autogenerated* from the file ./j-grid.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_1p5 = RealNumber('1.5'); _sage_const_50 = Integer(50)# This is a SageMath code.
# You need SageMath to run this code.

var('x')
G = Graphics()

#---spin numbers---#
spins = [_sage_const_3 , _sage_const_2 , _sage_const_3 ]  # should be within |j1 -j2| =< j3 =< j1 + j2


def is_compatible(spins):
    return abs(spins[_sage_const_0 ]-spins[_sage_const_1 ]) <= spins[_sage_const_2 ] and spins[_sage_const_2 ] <= spins[_sage_const_0 ] + spins[_sage_const_1 ]


def get_irreducible_reps(spins):
    """get irreducible representations"""
    irreps = []
    j_max = spins[_sage_const_0 ] + spins[_sage_const_1 ]
    j_min = abs(spins[_sage_const_0 ] - spins[_sage_const_1 ])
    for i in range(j_min, j_max+_sage_const_1 , _sage_const_1 ):
        irreps.append(i)
    return irreps


irreducible_reps = get_irreducible_reps(spins)
print(irreducible_reps)

#---dimensions of rep spaces---#
rep_dims = [_sage_const_2 *j + _sage_const_1  for j in spins]
#---poits representing the basis for tensor products---#
pcol = 'black'
psize = _sage_const_50 
lattice_vec = [vector([-_sage_const_1 , -_sage_const_1 ]), vector([_sage_const_1 , -_sage_const_1 ])]
# lattice_vec = list(reversed(lattice_vec))


def get_lattice(i, k):
    """addition of vectors"""
    return i*lattice_vec[_sage_const_0 ] + k*lattice_vec[_sage_const_1 ]


#--- tensor basis ---#
points_list = [list(get_lattice(l, m)) for l in range(rep_dims[_sage_const_0 ]) for m in range(rep_dims[_sage_const_1 ])]
#--- Irrep basis ---#
mid_height = -(rep_dims[_sage_const_0 ]+rep_dims[_sage_const_1 ]-_sage_const_2 )/_sage_const_2 
print mid_height
for i in range(len(irreducible_reps)):
    for k in range(_sage_const_2 *irreducible_reps[i]+_sage_const_1 ):
        points_list.append([rep_dims[_sage_const_0 ]+_sage_const_1p5 *i+_sage_const_1 , mid_height - irreducible_reps[i] + k])

points = list_plot(points_list, color=pcol, size=psize)
#--- level lines ---#
lcol = 'black'
linestyl = '--'
level_lines = Graphics()


levels = set([point[_sage_const_1 ] for point in points_list])
same_height_groups = list(map(lambda level: filter(lambda p: p[_sage_const_1 ] == level, points_list), levels))
for same_height_group in same_height_groups:
    sorted_group = sorted(same_height_group, key=lambda point: point[_sage_const_0 ])
    left_most = sorted_group[_sage_const_0 ]
    right_most = sorted_group[-_sage_const_1 ]
    level_lines += line2d([left_most, right_most], color=lcol, linestyle=linestyl)


G = points + level_lines
G.save("j_grids.png", aspect_ratio=_sage_const_1 , axes=False)

